#include "pch.h"

#include "init.h"

#include <Aikari-PLS/types/constants/init.h>
#include <Aikari-PLS/types/constants/msgQueue.h>
#include <Aikari-PLS/types/infrastructure/messageQueue.h>
#include <Aikari-Shared/infrastructure/SinglePointMessageQueue.hpp>
#include <Aikari-Shared/infrastructure/loggerMacro.h>
#include <Aikari-Shared/utils/windows.h>
#include <chrono>
#include <optional>

#include "lifecycle.h"

namespace plsConstants = AikariPLS::Types::constants;

namespace AikariPLS::Init
{
const char* hostLine =
    "127.11.45.14 iot-broker-mis.seewo.com # This line is generated by "
    "HugoAura-Aikari, please do not edit or delete it";

const char* swCoreProcName = "SeewoCore.exe";

static void _pushSwCoreProcKilledEvent(
    AikariShared::infrastructure::MessageQueue::SinglePointMessageQueue<
        AikariPLS::Types::infrastructure::RetMessageStruct>* msgQueue
)
{
    AikariPLS::Types::infrastructure::RetMessageStruct
        processKilledBroadcast = {
            .code = 0,
            .type = AikariPLS::Types::infrastructure::MESSAGE_TYPES::WS_MESSAGE,
            .data = { { "message",
                        plsConstants::init::networkInit::
                            SW_CORE_PROC_KILLED_MSG },
                      { "method",
                        plsConstants::init::networkInit::
                            SW_CORE_PROC_KILLED_PUSH_METHOD } },
            .eventId = plsConstants::msgQueue::WebSocket::WS_MSG_TYPE_PUSH,
            .wsInfo = plsConstants::msgQueue::WebSocket::baseBroadcastWSInfo
        };

    msgQueue->push(processKilledBroadcast);
};

PLSInitSuccess runPlsInit()
{
    auto& sharedMsgQueues =
        AikariPLS::Lifecycle::PLSSharedQueuesManager::getInstance();

    auto* retMsgQueuePtr = sharedMsgQueues.getPtr(
        &AikariPLS::Types::lifecycle::PLSSharedMsgQueues::retMsgQueue
    );

    LOG_INFO("Checking hosts file entry...");
    AikariShared::utils::windows::network::isSeewoCoreNeedToBeKill
        hostCheckResult =
            AikariShared::utils::windows::network::ensureHostKeyExists(hostLine
            );
    if (hostCheckResult)
    {
        LOG_INFO("Hosts file updated, killing SeewoCore process...");
        try
        {
            AikariShared::utils::windows::process::killProcessByName(
                swCoreProcName
            );

            _pushSwCoreProcKilledEvent(retMsgQueuePtr);
        }
        catch (const std::exception& err)
        {
            LOG_ERROR("Failed to kill SeewoCore, error: {}", err.what());
        }
    }

    return true;
}
}  // namespace AikariPLS::Init
