#include "pch.h"

#include "init.h"

#include <Aikari-PLS/types/constants/init.h>
#include <Aikari-PLS/types/constants/msgQueue.h>
#include <Aikari-Shared/infrastructure/loggerMacro.h>
#include <Aikari-Shared/infrastructure/queue/SinglePointMessageQueue.hpp>
#include <Aikari-Shared/types/itc/shared.h>
#include <Aikari-Shared/utils/windows.h>
#include <chrono>
#include <optional>

#include "lifecycle.h"

namespace plsConstants = AikariPLS::Types::constants;

namespace AikariPLS::Init
{
    constexpr const char* hostLine =
        "127.11.45.14 iot-broker-mis.seewo.com # This line is generated by "
        "HugoAura-Aikari, please do not edit or delete it";

    constexpr const char* swCoreProcName = "SeewoCore.exe";

    static void _pushSwCoreProcKilledEvent(
        AikariShared::infrastructure::MessageQueue::SinglePointMessageQueue<
            AikariShared::Types::InterThread::SubToMainMessageInstance>*
            msgQueue
    )
    {
        AikariShared::Types::InterThread::SubToMainWebSocketReply wsMsg = {
            .success = true,
            .code = 0,
            .data = { { "message",
                        plsConstants::init::networkInit::
                            SW_CORE_PROC_KILLED_MSG },
                      { "method",
                        plsConstants::init::networkInit::
                            SW_CORE_PROC_KILLED_PUSH_METHOD } },
            .eventId = plsConstants::msgQueue::WebSocket::WS_MSG_TYPE_PUSH,
            .wsInfo = { .isBroadcast = true }
        };

        AikariShared::Types::InterThread::SubToMainMessageInstance msgIns = {
            .type = AikariShared::Types::InterThread::MESSAGE_TYPES::WS_MESSAGE,
            .msg = wsMsg
        };

        msgQueue->push(msgIns);
    };

    PLSInitSuccess runPlsInit()
    {
        auto& sharedInsManager =
            AikariPLS::Lifecycle::PLSSharedInsManager::getInstance();
        auto& sharedMsgQueues =
            AikariPLS::Lifecycle::PLSSharedQueuesManager::getInstance();

        auto* retMsgQueuePtr = sharedMsgQueues.getPtr(
            &AikariPLS::Types::lifecycle::PLSSharedMsgQueues::retMsgQueue
        );

        LOG_INFO("Checking hosts file entry...");
        AikariShared::utils::windows::network::isSeewoCoreNeedToBeKill
            hostCheckResult =
                AikariShared::utils::windows::network::ensureHostKeyExists(
                    hostLine
                );
        if (hostCheckResult)
        {
            LOG_INFO("Hosts file updated, killing SeewoCore process...");
            try
            {
                AikariShared::utils::windows::process::killProcessByName(
                    swCoreProcName
                );

                std::jthread pushKillEvtThread(
                    [retMsgQueuePtr]()
                    {
                        std::this_thread::sleep_for(std::chrono::seconds(2));
                        _pushSwCoreProcKilledEvent(retMsgQueuePtr);
                    }
                );
                pushKillEvtThread.detach();
            }
            catch (const std::exception& err)
            {
                LOG_ERROR("Failed to kill SeewoCore, error: {}", err.what());
            }
        }

        auto* msgHandler = sharedInsManager.getPtr(
            &AikariPLS::Types::lifecycle::PLSSharedIns::threadMsgQueueHandler
        );

        return true;
    }
}  // namespace AikariPLS::Init
